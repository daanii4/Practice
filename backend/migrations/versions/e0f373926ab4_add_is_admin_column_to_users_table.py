"""Add is_admin column to users table

Revision ID: e0f373926ab4
Revises: 852c0f1d1e2d
Create Date: 2024-10-11 10:41:15.239588

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text
from app.auth import hash_password  # Import the password hashing function


# revision identifiers, used by Alembic.
revision: str = 'e0f373926ab4'
down_revision: Union[str, None] = '852c0f1d1e2d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade():
        # Create a new table for users if it doesn't exist
        op.create_table(
            'users',
            sa.Column('id', sa.Integer(), primary_key=True),
            sa.Column('email', sa.String(length=255), nullable=False, unique=True),
            sa.Column('hashed_password', sa.String(length=255), nullable=False),
            sa.Column('is_admin', sa.Boolean(), default=False, nullable=False),
            sa.Column('created_at', sa.DateTime(), server_default=sa.func.now()),
            sa.Column('updated_at', sa.DateTime(), server_default=sa.func.now(), onupdate=sa.func.now())
        )

        # Optional: Insert the initial admin user
        admin_email = "danielemojevbe@gmail.com"
        admin_hashed_password = hash_password("Oghenetega2004$")
        op.execute(
            text(
                f"INSERT INTO users (email, hashed_password, is_admin) VALUES ('{admin_email}', '{admin_hashed_password}', TRUE)"
            )
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
        op.drop_table('users')
    # ### end Alembic commands ###


